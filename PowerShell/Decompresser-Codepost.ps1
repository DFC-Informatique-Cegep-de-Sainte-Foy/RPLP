# ----------------------------------------------------------------------------------
#
# Variables de base 1
#
# ----------------------------------------------------------------------------------
$pathCourant = "."
$filtre = "*Remise*"
$nbfichiers = [System.IO.Directory]::GetFiles("$pathCourant", "$filtre").count
$fichiers = [System.IO.Directory]::GetFiles("$pathCourant", "$filtre")


# ----------------------------------------------------------------------------------
#
# Fonctions
#
# ----------------------------------------------------------------------------------
Function Get-ListeFichiers {
    
    Write-Host "Liste des fichiers trouv√©s :" -ForegroundColor Yellow

    $compteur = 1;

    foreach ($fichier in $fichiers) {
        Write-Host $compteur, "-", (Get-Item $fichier).Basename
        $compteur += 1
    }
}

Function Get-FichierChoisi {
    
    Do {
       
        Write-Host ">> Tapez le num√©ro du fichier souhait√© : " -NoNewline -ForegroundColor Yellow

        $NofichierChoisi = Read-Host 

        $compteur = 1;

        foreach ($fichier in $fichiers) {
   
            if ($compteur -eq $NofichierChoisi) {
                $fichierChoisi = Get-Item $fichier
                $nomFichierChoisi = $fichierChoisi.Basename
            }

            $compteur += 1
        }

    }While ($NofichierChoisi -lt 1 -or $NofichierChoisi -gt $nbfichiers)
        
    return $nomFichierChoisi, $fichierChoisi
}

Function Get-ConfirmationFichierChoisi($nomFichierChoisi) {
    
    Write-Host $nomFichierChoisi -ForegroundColor green

    Do {

        Write-Host ">> C'est le bon fichier ? " -NoNewline -ForegroundColor Yellow
        Write-Host "O" -NoNewline -ForegroundColor Cyan
        Write-Host "/" -NoNewline -ForegroundColor Yellow
        Write-Host "N" -NoNewline -ForegroundColor Cyan
        Write-Host " (" -NoNewline -ForegroundColor Yellow
        Write-Host "Q" -NoNewline -ForegroundColor Cyan
        Write-Host " - Quitter) " -NoNewline -ForegroundColor Yellow
      
        $estFichierCorrect = Read-Host

    }While ($estFichierCorrect.ToUpper() -ne 'O' -and $estFichierCorrect.ToUpper() -ne 'N' -and $estFichierCorrect.ToUpper() -ne 'Q')

    return $estFichierCorrect
}

Function Get-Fichiers($extension, $path) {
   
    $include = @("*$extension")
    $exclude = @()

    $items = Get-ChildItem $path -Recurse -Force -Include $include -Exclude $exclude

    return $items
}

Function Get-TextExplicatif-FichierMDJ($pathTempFichierMessageImportant) {

    Write-Host $pathTempFichierMessageImportant

    if (-not (Test-Path -PATH $pathTempFichierMessageImportant -PathType Leaf)) {

        New-Item -PATH $repertoireTempRPLP -Name $nomFichierMessageImportant -ItemType File -Force

        Write-Host "Cr√©ation de la liste des √©tudiants qui ont envoy√© des fichier $extension ..."
    }

$textExplicatif = @"  
        
--------------------- FICHIERS .MDJ --------------------- 
        
Les √©tudiants suivants ont envoy√© des fichiers .mdj et 
il n'y avait pas de fichiers .jpg ou .png dans le m√™me 
r√©pertoire o√π se trouvait le fichier .mdj
        
Ils doivent donc exporter leurs diagrammes au format image 
et envoyer √† nouveau leurs travail, avant d'envoyer le 
travail de tous les √©tudiants √† codePost
        
"@

    $textExplicatif | Add-Content -PATH $pathTempFichierMessageImportant
    
}

Function Get-TextExplicatif-FichierSVG($pathTempFichierMessageImportant) {
             
    if (-not (Test-Path -PATH $pathTempFichierMessageImportant -PathType Leaf)) {

        New-Item -PATH $repertoireTempRPLP -Name $nomFichierMessageImportant -ItemType File -Force

        Write-Host "Cr√©ation de la liste des √©tudiants qui ont envoy√© des fichier $extension ..."
    }
   
$textExplicatif = @"  

        
--------------------- FICHIERS .SVG --------------------- 
        
Les √©tudiants suivants ont envoy√© des fichiers .svg et 
il n'y avait pas de fichiers .jpg ou .png dans le m√™me 
r√©pertoire o√π se trouvait le fichier .svg
        
S'il s'agit d'un diagramme, ils doivent donc exporter 
leurs diagrammes au format image et envoyer √† nouveau 
leurs travail, avant d'envoyer le travail de tous les 
√©tudiants √† codePost
       
"@
    
    $textExplicatif | Add-Content -PATH $pathTempFichierMessageImportant
}

Function Get-ListeEtudiants-MauvaisFichier-AucunFichierImage($pathTempFichierMessageImportant, $items) {
    
    $qteEtudiants = 0

    foreach ($item in $items) {
            
        $fichiers = Get-ChildItem $item.Directory -Force -File

        foreach ($fichier in $fichiers) {

            $fichierImageTrouve =  $false
                
            Write-Host $fichier

            $extension = [IO.Path]::GetExtension($fichier)
                
            if ($extension -eq ".jpg" -or $extension -eq ".png") {
                
                $fichierImageTrouve = $true
                break
            }
        }

        Write-Host $fichierImageTrouve

        if ($fichierImageTrouve -eq $false) {

            if ($item.Directory -match '(?<nom>[A-Za-z]*)_(?<numeroMatricule>(\d{7,}))_[A-Za-z]*') {

                    $etudiant = $Matches.numeroMatricule + " - " + $Matches.nom

                    Write-Host "Ajouter dans la liste ..."
                   
                    $etudiant | Add-Content -PATH $pathTempFichierMessageImportant

                    Write-Host $etudiant
                    
                    $qteEtudiants++
            }
        }
                
        #pause            
    }

    [Environment]::NewLine | Add-Content -PATH $pathTempFichierMessageImportant 
    "TOTAL : ", $qteEtudiants, " √©tudiants" | Add-Content -PATH $pathTempFichierMessageImportant -NoNewline
}

# ---------------------------------------------------------------------------------- 
#
# Actions
#
# ----------------------------------------------------------------------------------

if ($nbfichiers -gt 1) {
    
    # Afficher la liste des fichiers ZIP trouvÈs dans le rÈpertoire, qui contient le mot 'Remise' dans leur nom 
    Get-ListeFichiers

    # Demander ‡ l'utilisateur de choisir l'un des fichiers
    $nomFichierChoisi, $fichierChoisi = Get-FichierChoisi

    # Afficher le nom du fichier choisi et demander une confirmation ‡ l'utilisateur
    $estFichierCorrect = Get-ConfirmationFichierChoisi($nomFichierChoisi)
}
elseif ($nbfichiers -eq 1) {

    # Choisir automatiquement le seule fichier ZIP qui contient le mot 'Remise' dans son nom
    $fichierChoisi = Get-Item $fichiers
    $nomFichierChoisi = $fichierChoisi.Basename

    # Afficher le nom du fichier choisi et demander une confirmation ‡ l'utilisateur
    $estFichierCorrect = Get-ConfirmationFichierChoisi($nomFichierChoisi)
}
else {
    
    Write-Host "Aucun fichier trouv√© !" -ForegroundColor Red
    Pause
    [Environment]::Exit(1)
}


# ExÈcuter l'action choisie par l'utilisateur
While ($estFichierCorrect.ToUpper() -eq 'N') {

    Get-ListeFichiers
    $nomFichierChoisi, $fichierChoisi = Get-FichierChoisi
    $estFichierCorrect = Get-ConfirmationFichierChoisi($nomFichierChoisi)
    
}

if ($estFichierCorrect.ToUpper() -eq 'O') {
    
    # Demander ‡ l'utilisateur d'entrer le nom du travail qui va apparaÓtre sur codePost
    Write-Host ">> Entrez le nom souhait√© pour le travail : " -NoNewline -ForegroundColor Yellow
    $nomTravail = Read-Host  
    

    # ----------------------------------------------------------------------------------
    #
    # Variables de base 2
    #
    # ----------------------------------------------------------------------------------
    $repertoireTempSO = [system.io.path]::GetTempPath()
    $repertoireTempRPLP = Join-Path -PATH $repertoireTempSO -ChildPath "TempRPLP"

    $nomFichierMessageImportant = $nomTravail + "_Message_Important" + ".txt"
    $pathTempFichierMessageImportant = Join-Path -PATH $repertoireTempRPLP -ChildPath $nomFichierMessageImportant

   
    # VÈrifier si le rÈpertoire temporaire existe dÈj‡
    if (Test-Path -PATH $repertoireTempRPLP) {
    
        try {
            Write-Host "R√©pertoire temporaire existe d√©j√† !"
            
            # Supprimer le rÈpertoire et les fichiers temporaires
            Remove-Item -PATH $repertoireTempRPLP -Force -Recurse

            Write-Host "R√©pertoire temporaire supprim√© avec succ√®s !"
        }
        catch {
            Write-Error -Message "Erreur au moment de supprimer le r√©pertoire '$repertoireTempRPLP'. Erreur : $_" -ErrorAction Stop
        }
    }

    # CrÈer le rÈpertoire temporaire
    Write-Host "Cr√©ation du r√©pertoire temporaire ..."
    
    New-Item -PATH $repertoireTempRPLP -ItemType Directory -ErrorAction Stop | Out-Null 
    
    Write-Host "R√©pertoire '$repertoireTempRPLP' cr√©√© avec succ√®s !"    
        
    # CrÈer le rÈpertoire du travail dans le rÈpertoire temporaire
    $pathRepertoireTempTravail = Join-Path -PATH $repertoireTempRPLP -ChildPath $nomTravail
    
    New-Item -PATH $pathRepertoireTempTravail -ItemType Directory -ErrorAction Stop | Out-Null 
        
    Write-Host "R√©pertoire '$nomTravail' cr√©√© avec succ√®s dans le r√©pertoire temporaire !"

    # Copier le fichier ZIP dans le rÈpertoire temporaire
    Copy-Item -PATH $fichierChoisi -Destination $repertoireTempRPLP
    Write-Host "Fichier '$nomFichierChoisi.zip' copi√© avec succËs dans le r√©pertoire temporaire !"

    # DÈfinir le chemin du fichier dans le rÈpertoire temporaire
    $pathTempFichier = Join-Path -PATH $repertoireTempRPLP -ChildPath "$nomFichierChoisi.zip"

    # Decompresser le fichier ZIP dans le rÈpertoire temporaire
    Expand-Archive -PATH $pathTempFichier -DestinationPath $pathRepertoireTempTravail -Force 
    Write-Host "Decompresser le fichier ZIP ..."
    #pause

    # VÈrifier les Ètudiants qui ont soumis des fichiers .mdj
    $extension = ".mdj"
        
    Write-Host "V√©rifier la pr√©sence de fichiers .mdj ..."

    $items = Get-Fichiers($extension)($pathRepertoireTempTravail)

    if ($items.length -gt 0) {

        Get-TextExplicatif-FichierMDJ($pathTempFichierMessageImportant)
        Write-Host $nomFichierMessageImportant

        Get-ListeEtudiants-MauvaisFichier-AucunFichierImage($pathTempFichierMessageImportant)($items)
    }
    
    # VÈrifier les Ètudiants qui ont soumis des fichiers .svg
    $extension = ".svg"
    
    Write-Host "V√©rifier la pr√©sence de fichiers .svg ..."

    $items = Get-Fichiers($extension)($pathRepertoireTempTravail)

    if ($items.length -gt 0) {

        Get-TextExplicatif-FichierSVG($pathTempFichierMessageImportant)
        Write-Host $nomFichierMessageImportant

        Get-ListeEtudiants-MauvaisFichier-AucunFichierImage($pathTempFichierMessageImportant)($items)
    }
      
    #pause
    
    # Faire le nettoyage
    $include = @("*.suo", "*.user", "*.userosscache", "*.sln.docstates", ".vs", "bin", "obj", "build", "*.class", ".settings", ".classpath", ".project", "*.mdj")
    $exclude = @()

    $items = Get-ChildItem $pathRepertoireTempTravail -Recurse -Force -Include $include -Exclude $exclude
  
    Write-Host "Nettoyage ..."
    
    foreach ($item in $items) {
                
        Remove-Item $item.FullName -Force -Recurse -ErrorAction SilentlyContinue
        Write-Host " Supprimer " $item.FullName
    }
        
    #pause
   
    # Renommer les sous-rÈpertoires dans le rÈpertoire temporaire
    $sousRepertoires = Get-ChildItem $pathRepertoireTempTravail 

    Write-Host "Renommer les sous-r√©pertoires dans le r√©pertoire temporaire ..."

    foreach ($repertoire in $sousRepertoires ) {
                
        if ($repertoire.name -match '[A-Za-z]*_(?<numeroMatricule>(\d{7,}))_[A-Za-z]*') {
    
            try {

                $nouveauxNomRepertoire = $Matches.numeroMatricule + '@csfoy.ca' 
	            
                $nomRepertoireCourant = $repertoire.BaseName
                Write-Host $nomRepertoireCourant
                $pathRepertoireCourant = Join-Path -PATH $pathRepertoireTempTravail -ChildPath $nomRepertoireCourant

                Rename-Item -PATH $pathRepertoireCourant -NewName $nouveauxNomRepertoire -Force
            }
            catch {

                Write-Error -Message "Erreur au moment de renommer le r√©pertoire '$repertoire'. Erreur : $_" -ErrorAction Stop
            }
        }
    }

    # CrÈer le fichier .txt avec la liste de courriels des Ètudiants
    $sousRepertoires = Get-ChildItem $pathRepertoireTempTravail

    $listeCourriels = $nomTravail + "_Liste_Courriels" + ".txt"
    $pathListeCourriels = Join-Path -PATH $repertoireTempRPLP -ChildPath $listeCourriels

    Write-Host "Cr√©ation de la liste avec le courriel de tous les √©tudiants qui ont envoy√© leur travail ..."

    New-Item -PATH $repertoireTempRPLP -Name $listeCourriels -ItemType File -Force

    foreach ($repertoire in $sousRepertoires ) {
	
        $repertoire.name | Add-Content -PATH $pathListeCourriels

        Write-Host $repertoire.Name
    }
    
    # Copier le rÈpertoire du travail et les fichiers .txt dans le rÈpertoire courant
    $pathCourantTravail = Join-Path -PATH $pathCourant -ChildPath $nomTravail
    $pathCourantEtoile = Join-Path -PATH $pathCourant -ChildPath "*"
    $pathTempRPLPEtoile = Join-Path -PATH $repertoireTempRPLP -ChildPath "*"

    if (Test-Path -PATH $pathCourantTravail) {
 
        Write-Host "Le r√©pertoire $nomTravail existe d√©j√† dans le r√©pertoire courant !"

        try {
            Remove-Item -PATH $pathCourantTravail -Force -Recurse
            Remove-Item -PATH $pathCourantEtoile -Include $listeCourriels -Force

            $pathCourantFichierMessageImportant = Join-Path -PATH $pathCourant -ChildPath $nomFichierMessageImportant
            
            Write-Host $nomFichierMessageImportant
            Write-Host $pathCourantFichierMessageImportant

            if (Test-Path -PATH $pathCourantFichierMessageImportant) {
                
                Remove-Item -PATH $pathCourantEtoile -Include $nomFichierMessageImportant -Force
            }

        }
        catch {
            Write-Error -Message "Erreur au moment de supprimer le r√©pertoire '$pathCourantTravail'. Erreur : $_" -ErrorAction Stop
        }
  
        Write-Host "R√©pertoire '$pathCourantTravail' supprim√© avec succ√®s !"
    }

    Write-Host "Copier le r√©pertoire du travail et fichiers .txt dans le r√©pertoire courant !"
    
    Copy-Item -PATH $pathRepertoireTempTravail -Recurse -Destination $pathCourant -Force
    Copy-Item -PATH $pathTempRPLPEtoile -Include "*$nomTravail*.txt" -Force
    
    #pause

    # Supprimer le rÈpertoire et les fichiers temporaires
    Remove-Item -PATH $repertoireTempRPLP -Force -Recurse
    Write-Host "R√©pertoire temporaire supprim√© avec succ√®s !"
   
    #pause
}

if ($estFichierCorrect.ToUpper() -eq 'Q') {
    Write-Host "Quitter ..."
}