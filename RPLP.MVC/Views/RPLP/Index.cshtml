@using RPLP.MVC.Controllers
@model RPLP.MVC.Models.PeerReviewViewModel

<div class="container mt-3">
    <div class="wrapper">

        <div id="orgsCollapsible" class="collapsible">
            <input type="checkbox" id="collapsible-orgs" name="checkboxOrg" />
            <label for="collapsible-orgs">Organisations</label>
            <div class="collapsible-content">
                @foreach (var org in Model.Organisations)
                {
                    <Button class="btn-lg btn-outline-primary p-2 buttons" onclick="SetOrganisationName('@org.Name')" id='@org.Name'>@org.Name</Button>
                }
            </div>
        </div>
    </div>

    <div class="wrapper">
        <div id="classroomCollapsible" class="collapsible" hidden>
            <input type="checkbox" id="collapsible-class" name="checkboxClass" />
            <label for="collapsible-class">Classes</label>
            <div class="collapsible-content" id="classroomContent">
            </div>
        </div>
    </div>

    <div class="wrapper">
        <div id="assignmentCollapsible" class="collapsible" hidden>
            <input type="checkbox" id="collapsible-assignments" name="checkboxAssignment" />
            <label for="collapsible-assignments">Travaux</label>
            <div class="collapsible-content" id="assignmentContent">
            </div>
        </div>
    </div>

    <div class="wrapper" id="scriptStart" hidden>
        <div id="level">
            <label for="numberOfReview">Nombre de revues par étudiant</label>
            <input class="p-2 buttons" type="number" id="numberOfReview" min="1" max="10" value="3" />
            <button class="btn-lg btn-primary p-2 buttons" onclick="StartStudentAssignationScript()">Lancer le script de revue des pairs</button>
            <button class="btn-lg btn-primary p-2 buttons" onclick="StartTeacherAssignationScript()">Lancer le script de revue du prof</button>
            <select class="form-control" id="selectTeacher"></select>
            <button class="btn-lg btn-primary p-2 buttons" hidden="hidden" onclick="StartTutorAssignationScript()">Lancer le script de revue du tuteur</button>
            <select class="form-control" hidden="hidden" id="selectTutor"></select>
            <button id="marg" class="btn-lg btn-primary p-2 buttons" hidden="hidden" onclick="RemoveCollaboratorFromAssignment()">Retirer les pairs du travail</button>
        </div>

        <div class="form-group">
            <button class="btn-lg btn-primary p-2 buttons" hidden="hidden" onclick="DownloadComments()">Télécharger les commentaires</button>
            <button class="btn-lg btn-primary p-2 buttons" hidden="hidden" onclick="DownloadAllRepositoriesForAssignment()">Télécharger les dépôts de devoir de la classe</button>
            <button class="btn-lg btn-primary p-2 buttons" hidden="hidden" onclick="DownloadSingleRepository()">Télécharger le dépôt d'un étudiant</button>
            <select class="form-control" hidden="hidden" id="selectStudent"></select>
        </div>
    </div>
    <div class="wrapper" id="allocationContentTable" hidden>
    </div>
</div>

<style>
    #level {
        margin-top: 6px;
    }

    #marg {
        margin-top: 10px;
    }
</style>

<script src="/lib/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">

    var SelectedOrganisationName = "";
    var SelectedClassroomName = "";
    var SelectedAssignmentName = "";

    var organisations = @Html.Raw(Json.Serialize(Model.Organisations));
    var classrooms = [];
    var assignments = [];
    var students = [];
    var teachers = [];
    var tutors = [];
    var allocations = {};
    var reposAssociatedAThisAssignment = 0;

    setInterval(function () { GetAllocationsInformations(SelectedClassroomName, SelectedAssignmentName) }, 5000);

    GetAllocationsInformations = function (classroomName, assignementName) {
        var ajaxURL = '/RPLP/GetAllocationsInformations';

        $.ajax({
            type: 'GET',
            url: ajaxURL,
            data: { classroomName: SelectedClassroomName, assignementName: SelectedAssignmentName },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () {
                console.log('firing ajax call');
            },
            success: function (data) {
                console.log('Success');
                allocations = data;
                ShowAllocations();
            },
            error: function (ex) {
                console.log('Error');
            }
        });
    }

    ShowAllocations = function () {
        var div = document.getElementById("allocationContentTable");
        div.innerHTML = "";

        var table = document.createElement("table");
        table.setAttribute("class", "table table-striped");
        div.appendChild(table);

        var thead = document.createElement("thead");
        table.appendChild(thead);

        var tr = document.createElement("tr");
        thead.appendChild(tr);

        var th1 = document.createElement("th");
        var thText = document.createTextNode("Repository Name");
        th1.appendChild(thText);
        tr.appendChild(th1);

        var th2 = document.createElement("th");
        thText = document.createTextNode("Student Name");
        th2.appendChild(thText);
        tr.appendChild(th2);

        var th3 = document.createElement("th");
        thText = document.createTextNode("Teacher Name");
        th3.appendChild(thText);
        tr.appendChild(th3);

        var th4 = document.createElement("th");
        thText = document.createTextNode("Status");
        th4.appendChild(thText);
        tr.appendChild(th4);

        thead.appendChild(tr);

        var tbody = document.createElement("tbody");
        table.appendChild(tbody);

        allocations.pairs.forEach(allocation => {
            var tr = document.createElement("tr");
            tbody.appendChild(tr);

            var td1 = document.createElement("td");
            td1.setAttribute("style", "max-width: 200px");
            tdText = document.createTextNode(allocation.repositoryName);
            td1.appendChild(tdText);
            tr.appendChild(td1);

            if (allocation.studentName === null) {
                var td2 = document.createElement("td");
                td2.setAttribute("style", "max-width: 200px");
                tdText = document.createTextNode("");
                td2.appendChild(tdText);
                tr.appendChild(td2);
                var td3 = document.createElement("td");
                td3.setAttribute("style", "max-width: 200px");
                tdText = document.createTextNode(allocation.teacherName);
                td3.appendChild(tdText);
                tr.appendChild(td3);
            }
            else {
                var td2 = document.createElement("td");
                td2.setAttribute("style", "max-width: 200px");
                tdText = document.createTextNode(allocation.studentName);
                td2.appendChild(tdText);
                tr.appendChild(td2);
                var td3 = document.createElement("td");
                td3.setAttribute("style", "max-width: 200px");
                tdText = document.createTextNode("");
                td3.appendChild(tdText);
                tr.appendChild(td3);
            }


            if (allocation.status == 53) {
                var td4 = document.createElement("td");
                td4.setAttribute("style", "max-width: 200px");
                td4.setAttribute("class", "bi bi-check2");
                tr.appendChild(td4);
            }
            else if (allocation.status == 42) {
                var td4 = document.createElement("td");
                td4.setAttribute("style", "max-width: 200px");
                td4.setAttribute("class", "bi bi-clock");
                tr.appendChild(td4);
            }
            else {
                var td4 = document.createElement("td");
                td4.setAttribute("style", "max-width: 200px");
                td4.setAttribute("class", "bi bi-x");
                tr.appendChild(td4);
            }
        });
        div.appendChild(table);
    }

    function SetOrganisationName(organisationName) {
        if (organisationName != "") {
            SelectedOrganisationName = organisationName;
            GetClassroomsOfOrganisationByName(SelectedOrganisationName);

            organisations.forEach(organisation => {
                if (organisation.name == organisationName) {
                    document.getElementById(organisation.name).classList.remove("btn-outline-primary");
                    document.getElementById(organisation.name).classList.add("btn-primary");
                } else {
                    document.getElementById(organisation.name).classList.add("btn-outline-primary");
                    document.getElementById(organisation.name).classList.remove("btn-primary");
                }
            });
        }
    }

    function SetClassroomName(classroomName) {
        if (classroomName != "") {
            SelectedClassroomName = classroomName;
            GetAssignmentsOfClassroomByName(SelectedClassroomName);
            GetStudentsOfClassroomByName(SelectedClassroomName);

            classrooms.forEach(classroom => {
                if (classroom.name == classroomName) {
                    document.getElementById(classroom.name).classList.remove("btn-outline-primary");
                    document.getElementById(classroom.name).classList.add("btn-primary");
                } else {
                    document.getElementById(classroom.name).classList.add("btn-outline-primary");
                    document.getElementById(classroom.name).classList.remove("btn-primary");
                }
            });

            GetStudentsInClassroomByClassroomName(classroomName);
            GetTeacherInClassroomByClassroomName(classroomName);
            GetTutors(classroomName);
        }
    }

    function SetAssignmentName(assignmentName) {
        if (assignmentName != "") {
            SelectedAssignmentName = assignmentName;
            GetValidReposByAssignmentName(SelectedAssignmentName);

            assignments.forEach(assignment => {
                if (assignment.name == assignmentName) {
                    document.getElementById(assignment.name).classList.remove("btn-outline-primary");
                    document.getElementById(assignment.name).classList.add("btn-primary");
                } else {
                    document.getElementById(assignment.name).classList.add("btn-outline-primary");
                    document.getElementById(assignment.name).classList.remove("btn-primary");
                }
            });
            GetAllocationsInformations(SelectedClassroomName, SelectedAssignmentName);
            $("#scriptStart").removeAttr("hidden");
            $("#allocationContentTable").removeAttr("hidden");
        }
    }

    ShowStudents = function () {
        const classes = document.getElementById("selectStudent");
        classes.innerHTML = '';

        var option = document.createElement("option");
        option.text = "Faites un choix";
        option.value = -1;
        var select = document.getElementById("selectStudent");
        select.appendChild(option);

        students.forEach(student => {
            var option = document.createElement("option");
            option.text = student.firstName + " " + student.lastName;
            option.value = student.username;
            var select = document.getElementById("selectStudent");
            select.appendChild(option);
        });
    }

    ShowTeachers = function () {
        const classes = document.getElementById("selectTeacher");
        classes.innerHTML = '';

        var option = document.createElement("option");
        option.text = "Faites un choix";
        option.value = -1;
        var select = document.getElementById("selectTeacher");
        select.appendChild(option);

        teachers.forEach(teacher => {
            var option = document.createElement("option");
            option.text = teacher.firstName + " " + teacher.lastName;
            option.value = teacher.username;
            var select = document.getElementById("selectTeacher");
            select.appendChild(option);
        });
    }


    ShowTutors = function () {
        const classes = document.getElementById("selectTutor");
        classes.innerHTML = '';

        var option = document.createElement("option");
        option.text = "Faites un choix";
        option.value = -1;
        var select = document.getElementById("selectTutor");
        select.appendChild(option);

        tutors.forEach(tutor => {
            var option = document.createElement("option");
            option.text = tutor.firstName + " " + tutor.lastName;
            option.value = tutor.username;
            var select = document.getElementById("selectTutor");
            select.appendChild(option);
        });
    }
    
    GetValidReposByAssignmentName = function(assignmentName){
           var ajaxURL = '/RPLP/GetValidReposByAssignmentName';
            $.ajax({
                type: 'GET',
                url: ajaxURL,
                data: { assignmentName : assignmentName},
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                beforeSend: function () {
                    console.log('firing ajax call');
                },
                success: function (data) {
                    reposAssociatedAThisAssignment = data;
                    document.getElementById("numberOfReview").setAttribute("max", reposAssociatedAThisAssignment - 1);
                },
                error: function (ex) {
                    console.log('Error');
                }
            });
    }

    GetStudentsInClassroomByClassroomName = function (classroomName)
     {
       var ajaxURL = '/RPLP/GetStudentsInClassroomByClassroomName';
        $.ajax({
            type: 'GET',
            url: ajaxURL,
            data: { ClassroomName: classroomName },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () {
                console.log('firing ajax call');
            },
            success: function (data) {
                students = data;
                ShowStudents();
            },
            error: function (ex) {
                console.log('Error');
            }
        });
    }

    function GetClassroomsOfOrganisationByName(organisationName) {
        var ajaxURL = '/RPLP/GetClassroomsOfOrganisationByName';

        $.ajax({
            type: 'GET',
            url: ajaxURL,
            data: { orgName: organisationName },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () {
                console.log('firing ajax call');
            },
            success: function (data) {
                classrooms = data;
                ShowClassrooms();
            },
            error: function (ex) {
                console.log('Error');
            }
        });
    }

    function GetAssignmentsOfClassroomByName(classroomName) {
        var ajaxURL = '/RPLP/GetAssignmentsOfClassroomByName';

        $.ajax({
            type: 'GET',
            url: ajaxURL,
            data: { classroomName: classroomName },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () {
                console.log('firing ajax call');
            },
            success: function (data) {
                assignments = data;

                ShowAssignments();
            },
            error: function (ex) {
                console.log('Error');
            }
        });
    }

    function GetStudentsOfClassroomByName(classroomName) {
        var ajaxURL = '/RPLP/GetStudentsOfClassroomByName';

        $.ajax({
            type: 'GET',
            url: ajaxURL,
            data: { classroomName: classroomName },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () {
                console.log('firing ajax call');
            },
            success: function (data) {
                students = data;
                $('selectStudent').empty();
                students.forEach(student => {
                    $('selectStudent').append($("<option />").val(student.Name).text(student.Name));
                });
            },
            error: function (ex) {
                console.log('Error');
            }
        });
    }


    function ShowClassrooms() {
        var myDiv = document.getElementById("classroomContent");
        myDiv.replaceChildren();

        classrooms.forEach(classroom => {
            var button = document.createElement("BUTTON");
            button.innerHTML = classroom.name;
            button.classList.add("btn-lg", "btn-outline-primary", "p-2", "buttons");
            button.setAttribute('id', classroom.name);
            button.onclick = function () { SetClassroomName(classroom.name); };
            myDiv.appendChild(button);
        });

        $("#classroomCollapsible").removeAttr("hidden");
        $("#assignmentCollapsible").attr("hidden", true);
        $("#scriptStart").attr("hidden", true);
    }

    function ShowAssignments() {
        var myDiv = document.getElementById("assignmentContent");
        myDiv.replaceChildren();

        assignments.forEach(assignment => {
            var button = document.createElement("BUTTON");
            button.innerHTML = assignment.name;
            button.classList.add("btn-lg", "btn-outline-primary", "p-2", "buttons");
            button.setAttribute('id', assignment.name);
            button.onclick = function () { SetAssignmentName(assignment.name); };
            myDiv.appendChild(button);
        });

        $("#assignmentCollapsible").removeAttr("hidden");
        $("#scriptStart").attr("hidden", true);
    }

    function StartStudentAssignationScript() {
        var ajaxURL = '/RPLP/StartStudentAssignationScript';
        var numberOfReviewsRequired = $("#numberOfReview").val();

        $.ajax({
            type: 'GET',
            url: ajaxURL,
            data: { organisationName: SelectedOrganisationName, classroomName: SelectedClassroomName, assignmentName: SelectedAssignmentName, numberOfReviews: numberOfReviewsRequired },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () {
                console.log('firing ajax call');
            },
            success: function (data) {
                console.log("works!");
                 GetAllocationsInformations(SelectedClassroomName, SelectedAssignmentName);
            },
            error: function (ex) {
                console.log(ex);
            }
        });
    }

    function StartTeacherAssignationScript() {
        var ajaxURL = '/RPLP/StartTeachertAssignationScript';
        var teacherUsername = document.getElementById("selectTeacher").value;

        $.ajax({
            type: 'GET',
            url: ajaxURL,
            data: { organisationName: SelectedOrganisationName, classroomName: SelectedClassroomName, assignmentName: SelectedAssignmentName, teacherUsername: teacherUsername },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () {
                console.log('firing ajax call');
            },
            success: function (data) {
                console.log("works!");
                 GetAllocationsInformations(SelectedClassroomName, SelectedAssignmentName);
            },
            error: function (ex) {
                console.log(ex);
            }
        });
    }

    function RemoveCollaboratorFromAssignment() {
        var ajaxURL = '/RPLP/RemoveCollaboratorsFromAssignmentRepositories';

        $.ajax({
            type: 'GET',
            url: ajaxURL,
            data: { organisationName: SelectedOrganisationName, classroomName: SelectedClassroomName, assignmentName: SelectedAssignmentName },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () {
                console.log('firing ajax call');
            },
            success: function (data) {
                console.log("works!");
            },
            error: function (ex) {
                console.log(ex);
            }
        });
    }

    function GetTeacherInClassroomByClassroomName(classroomName) {
        var ajaxURL = '/RPLP/GetTeacherInClassroomByClassroomName';
        $.ajax({
            type: 'GET',
            url: ajaxURL,
            data: { classroomName: classroomName },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () {
                console.log('firing ajax call');
            },
            success: function (data) {
                teachers = data;
                ShowTeachers();
            },
            error: function (ex) {
                console.log('Error');
            }
        });
    }

    function GetTutors(classroomName) {
        var ajaxURL = '/RPLP/GetTutors';
        $.ajax({
            type: 'GET',
            url: ajaxURL,
            data: { classroomName: classroomName },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function () {
                console.log('firing ajax call');
            },
            success: function (data) {
                tutors = data;
                ShowTutors();
            },
            error: function (ex) {
                console.log('Error');
            }
        });
    }

    function DownloadComments() {
        var url = `RPLP/DownloadCommentsOfPullRequestByAssignment?organisationName=${SelectedOrganisationName}&classroomName=${SelectedClassroomName}&assignmentName=${SelectedAssignmentName}`;
        window.open(url);
    }

    function DownloadSingleRepository() {
        var selectedStudent = document.getElementById('selectStudent').value;
        var url = `RPLP/DownloadSingleRepository?organisationName=${SelectedOrganisationName}&classroomName=${SelectedClassroomName}&assignmentName=${SelectedAssignmentName}&studentUsername=${selectedStudent}`;
        window.open(url);
    }

    function DownloadAllRepositoriesForAssignment() {
        var url = `RPLP/DownloadAllRepositoriesForAssignment?organisationName=${SelectedOrganisationName}&classroomName=${SelectedClassroomName}&assignmentName=${SelectedAssignmentName}`;
        window.open(url);
    }

</script>
